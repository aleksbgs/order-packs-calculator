// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/calculate_packs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCalculatePacksService is a mock of CalculatePacksService interface.
type MockCalculatePacksService struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatePacksServiceMockRecorder
}

// MockCalculatePacksServiceMockRecorder is the mock recorder for MockCalculatePacksService.
type MockCalculatePacksServiceMockRecorder struct {
	mock *MockCalculatePacksService
}

// NewMockCalculatePacksService creates a new mock instance.
func NewMockCalculatePacksService(ctrl *gomock.Controller) *MockCalculatePacksService {
	mock := &MockCalculatePacksService{ctrl: ctrl}
	mock.recorder = &MockCalculatePacksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculatePacksService) EXPECT() *MockCalculatePacksServiceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCalculatePacksService) Execute(orderAmount int) (map[int]int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", orderAmount)
	ret0, _ := ret[0].(map[int]int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockCalculatePacksServiceMockRecorder) Execute(orderAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCalculatePacksService)(nil).Execute), orderAmount)
}

// GetPackSizes mocks base method.
func (m *MockCalculatePacksService) GetPackSizes() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackSizes")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackSizes indicates an expected call of GetPackSizes.
func (mr *MockCalculatePacksServiceMockRecorder) GetPackSizes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackSizes", reflect.TypeOf((*MockCalculatePacksService)(nil).GetPackSizes))
}

// UpdatePackSizes mocks base method.
func (m *MockCalculatePacksService) UpdatePackSizes(newSizes []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackSizes", newSizes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePackSizes indicates an expected call of UpdatePackSizes.
func (mr *MockCalculatePacksServiceMockRecorder) UpdatePackSizes(newSizes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackSizes", reflect.TypeOf((*MockCalculatePacksService)(nil).UpdatePackSizes), newSizes)
}
