// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/repository/pack_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPackRepository is a mock of PackRepository interface.
type MockPackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPackRepositoryMockRecorder
}

// MockPackRepositoryMockRecorder is the mock recorder for MockPackRepository.
type MockPackRepositoryMockRecorder struct {
	mock *MockPackRepository
}

// NewMockPackRepository creates a new mock instance.
func NewMockPackRepository(ctrl *gomock.Controller) *MockPackRepository {
	mock := &MockPackRepository{ctrl: ctrl}
	mock.recorder = &MockPackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackRepository) EXPECT() *MockPackRepositoryMockRecorder {
	return m.recorder
}

// GetPackSizes mocks base method.
func (m *MockPackRepository) GetPackSizes() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackSizes")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackSizes indicates an expected call of GetPackSizes.
func (mr *MockPackRepositoryMockRecorder) GetPackSizes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackSizes", reflect.TypeOf((*MockPackRepository)(nil).GetPackSizes))
}

// UpdatePackSizes mocks base method.
func (m *MockPackRepository) UpdatePackSizes(newSizes []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePackSizes", newSizes)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePackSizes indicates an expected call of UpdatePackSizes.
func (mr *MockPackRepositoryMockRecorder) UpdatePackSizes(newSizes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackSizes", reflect.TypeOf((*MockPackRepository)(nil).UpdatePackSizes), newSizes)
}
